module Fibonacci.Closed where

open import Level using (0‚Ñì; _‚äî_) 
open import Function
open import Relation.Binary
open import Relation.Binary.PropositionalEquality hiding (Extensionality)
open import Axiom.Extensionality.Propositional
open import Relation.Nullary
open import Data.Product
open import Data.Sum
open import Data.Maybe
open import Data.Unit

open import Algebra.Core
open import Algebra.Structures

open import Data.Subset
open import Algebra.Field
import Algebra.Field.Rational as FieldRat

open import Data.Rational as Rat using (‚Ñö; mk‚Ñö; 0‚Ñö; 1‚Ñö; ¬Ω)
open import Data.Integer as Int using (‚Ñ§)
open ‚Ñ§ using (pos; negsuc)
open import Data.Nat as Nat using (‚Ñï; zero) renaming (suc to _+1)
import Data.Nat.Coprimality as Coprimality
import Data.Nat.Divisibility as Divisibility


open import Fibonacci.Recursive renaming (fibonacci to fibonacci-recursive)


-- ================================================================
-- Extension Fibonacci
-- ================================================================
-- This module implements a function ``fibonacci : (n : ‚Ñï) ‚Üí ‚Ñï``
-- which computes the ``n``th Fibonacci number using the closed formula.

-- ----------------------------------------------------------------
-- Fibonacci via Recursive Formula
-- ----------------------------------------------------------------
-- A common implementation of this is the following recursive function:
-- ::
--   fibonacci-rec 0 = 0
--   fibonacci-rec 1 = 1
--   fibonacci-rec (1+ (n +1)) = ficonacci-rec (n +1) + fibonacci-rec n
-- For the sake of simplicity, assume we are working with fixed-size
-- numerical representations, so that addition and multiplication are
-- constant-time. Each recursive call spawns 2 further calls, and
-- the max call depth is ``n``, so the resulting binary recursion-tree has height ``n``
-- (though all but one of the root-to-leaf-paths have length less than ``n``).
-- For a binary tree of height ``n``, the number of nodes in the tree
-- is less than ``2^n``. So, the time complexity of ``fibonacci-rec``
-- is ``O(log[2^n])``.

-- ----------------------------------------------------------------
-- Fibonacci via Closed Formula over ‚Ñö[sqrt[5]]
-- ----------------------------------------------------------------
-- This module's implementation instead uses the closed formula
-- ::
--   fibonacci-ext n = (œÜ ^ n - (1 - œÜ) ^ n) / sqrt[5]
-- where ``œÜ = (1/2)(1 + sqrt[5])`` (the golden ratio).
-- For the sake of simplicity, assume we are working with fixed-size
-- numerical representations, so that addition, multiplication, and
-- inversion are constant-time. Then this formula computes with
-- the complexity of raising ``œÜ`` to the power ``n``,
-- which via recursive exponentiation involves ``n`` multiplications
-- and so is ``O(n)``.


open import Algebra.Field.Extension.BySqrt5
open import Algebra.Field.Exponentiation field-ExtensionBySqrt


-- the ``n``th fibonacci number is
-- ::
--   ((œÜ ^ n) - ((1 - œÜ) ^ n)) / sqrt[5]
-- or more concisely with ``œÜ‚Å∫`` and ``œÜ‚Åª``,
-- ::
--   ((œÜ‚Å∫ ^ n) - (œÜ‚Åª ^ n)) / sqrt[5]
fibonacci-extended : ‚Ñï ‚Üí ‚Ñö[sqrt[5]]
fibonacci-extended n = ((œÜ‚Å∫ ^ n) - (œÜ‚Åª ^ n)) √∑‚Ä≤ sqrt[5]|

-- some example values

_ : fibonacci-extended 0 ‚â° 0#
_ = refl
_ : fibonacci-extended 1 ‚â° 1#
_ = refl
_ : fibonacci-extended 2 ‚â° 1#
_ = refl
_ : fibonacci-extended 3 ‚â° 2#
_ = refl
_ : fibonacci-extended 4 ‚â° 3#
_ = refl
_ : fibonacci-extended 5 ‚â° 5#
_ = refl


-- ``fibonacci-extended`` yields an entirely internal, integral, natural result
postulate
  fibonacci-extended-internal : ‚àÄ {n} ‚Üí
    external (fibonacci-extended n) ‚â° 0‚Ñö
  fibonacci-extended-integral : ‚àÄ {n} ‚Üí
    ‚Ñö.denominator (internal (fibonacci-extended n)) ‚â° pos 0
  fibonacci-extended-natural : ‚àÄ {n} ‚Üí ‚àÉ[ x ]
    (‚Ñö.numerator (internal (fibonacci-extended n)) ‚â° pos x)
    

-- closed formula for the ``n``th Fibonacci number,
-- since ``fibonacci-extended`` yields an entirely internal, natural result
fibonacci : ‚Ñï ‚Üí ‚Ñï
fibonacci = Int.‚à£_‚à£ ‚àò ‚Ñö.numerator ‚àò internal ‚àò fibonacci-extended


module Correct where
  -- alias for commonly used domain
  A : Set
  A = ‚Ñö[sqrt[5]]

  -- some useful constants

  4‚Ñö : ‚Ñö
  4‚Ñö = 1‚Ñö Rat.+ 1‚Ñö Rat.+ 1‚Ñö Rat.+ 1‚Ñö

  -- 4# : ‚Ñö[sqrt[5]]
  -- 4# = 4‚Ñö +sqrt[5] 0‚Ñö

  ¬º‚Ñö : ‚Ñö
  ¬º‚Ñö = mk‚Ñö (pos 1) 3 coprime-1-4 where
    coprime-1-4 = Coprimality.1-coprimeTo 4

  ¬º# : ‚Ñö[sqrt[5]]
  ¬º# = ¬º‚Ñö +sqrt[5] 0‚Ñö

  open import Algebra.Field.PolynomialNew field-ExtensionBySqrt ¬º#

  -- nth Fibonacci number (via recursive function) in ‚Ñö[Sqrt[5]]
  F : ‚Ñï ‚Üí A
  F 0 = 0#
  F 1 = 1#
  F ((n +1) +1) = F (n +1) + F n

  -- f = ‚àë F (i+1) * ùëã‚Å±
  f‚ÇÄ : PowerSeries
  f‚ÇÄ = ‚àë Œª i ‚Üí F (i +1)

  -- e = ‚àë[ 2^(i+1) ùëã‚Å± ]
  e : PowerSeries
  e = ‚àë Œª i ‚Üí 2# ^ (i +1)

  -- Observe that ``lim[i‚Üí‚àû] e ‚â° 2`` (since ``|ùëã| = ¬º < ¬Ω``).
  -- Since ``0 ‚â§ f ‚â§ e``, we must also have that ``f`` converges.

  ùëã*f‚ÇÄ : PowerSeries
  ùëã*f‚ÇÄ = ùëã* f‚ÇÄ

  ùëã^2*f‚ÇÄ : PowerSeries
  ùëã^2*f‚ÇÄ = ùëã¬≤* f‚ÇÄ

  1-ùëã-ùëã¬≤ : Polynomial
  1-ùëã-ùëã¬≤ = -1# *ùëã^ 2 +‚Çö (-1# *ùëã^ 1 +‚Çö (1# *ùëã^ 0 +‚Çö 0‚Çö))
  
  -- g‚ÇÄ = f‚ÇÄ - ùëã*f‚ÇÄ - ùëã^2*f‚ÇÄ
  g‚ÇÄ : PowerSeries
  g‚ÇÄ = f‚ÇÄ -‚Çõ (ùëã*f‚ÇÄ  +‚Çõ ùëã^2*f‚ÇÄ)

  -- g‚ÇÅ = (1 - ùëã - ùëã¬≤) * f‚ÇÄ
  g‚ÇÅ : PowerSeries
  g‚ÇÅ = scale‚Çõ 1-ùëã-ùëã¬≤ f‚ÇÄ

  postulate
    n-n‚â°0 : ‚àÄ n ‚Üí n - n ‚â° 0#
    -n+n‚â°0 : ‚àÄ n ‚Üí (- n) + n ‚â° 0#
    0‚â°-n+n : ‚àÄ n ‚Üí 0# ‚â° (- n) + n
    n-0‚â°0 : ‚àÄ n ‚Üí n - 0# ‚â° 0#
    n+0‚â°0 : ‚àÄ n ‚Üí n + 0# ‚â° 0#
    n‚â°n+0 : ‚àÄ n ‚Üí n ‚â° n + 0#
    -n‚â°-1*n : ‚àÄ n ‚Üí (- n) ‚â° -1# * n
    n‚â°1*n : ‚àÄ n ‚Üí n ‚â° 1# * n
    +-comm : ‚àÄ m n ‚Üí m + n ‚â° n + m
    +-assoc : ‚àÄ l m n ‚Üí (l + m) + n ‚â° l + (m + n)
    *-distribÀ° : ‚àÄ l m n ‚Üí l * (m + n) ‚â° (l * m) + (l * n)

  -- postulate
  --   g‚ÇÄ‚âà‚Çõg‚ÇÅ : g‚ÇÄ ‚âà‚Çõ g‚ÇÅ
  g‚ÇÄ‚âà‚Çõg‚ÇÅ : g‚ÇÄ ‚âà‚Çõ g‚ÇÅ
  g‚ÇÄ‚âà‚Çõg‚ÇÅ 0 rewrite n-0‚â°0 0# = refl
  g‚ÇÄ‚âà‚Çõg‚ÇÅ 1 rewrite n+0‚â°0 1# = refl
  g‚ÇÄ‚âà‚Çõg‚ÇÅ (1+ (i +1)) =
    begin

      ((F‚ÇÅ + F‚ÇÄ) + F‚ÇÅ) - ((F‚ÇÅ + F‚ÇÄ) + F‚ÇÅ)

    ‚â°‚ü® n-n‚â°0 ((F‚ÇÅ + F‚ÇÄ) + F‚ÇÅ) ‚ü©

      0#

    ‚â°‚ü® 0‚â°-n+n (F‚ÇÅ + (F‚ÇÅ + F‚ÇÄ)) ‚ü©

      ((- (F‚ÇÅ + (F‚ÇÅ + F‚ÇÄ))) + (F‚ÇÅ + (F‚ÇÅ + F‚ÇÄ)))

    ‚â°‚ü® cong (Œª a ‚Üí (- (F‚ÇÅ + (F‚ÇÅ + F‚ÇÄ))) + (F‚ÇÅ + a)) (+-comm F‚ÇÅ F‚ÇÄ) ‚ü©

      ((- (F‚ÇÅ + (F‚ÇÅ + F‚ÇÄ))) + (F‚ÇÅ + (F‚ÇÄ + F‚ÇÅ)))

    ‚â°‚ü® cong (Œª a ‚Üí (- (F‚ÇÅ + (F‚ÇÅ + F‚ÇÄ))) + a)

      (sym (+-assoc F‚ÇÅ F‚ÇÄ F‚ÇÅ)) ‚ü© ((- (F‚ÇÅ + (F‚ÇÅ + F‚ÇÄ))) + ((F‚ÇÅ + F‚ÇÄ) + F‚ÇÅ))
      
    ‚â°‚ü® cong (Œª a ‚Üí (a + ((F‚ÇÅ + F‚ÇÄ) + F‚ÇÅ))) (-n‚â°-1*n (F‚ÇÅ + (F‚ÇÅ + F‚ÇÄ))) ‚ü©

      ((-1# * (F‚ÇÅ + (F‚ÇÅ + F‚ÇÄ))) + ((F‚ÇÅ + F‚ÇÄ) + F‚ÇÅ))
      
    ‚â°‚ü® cong (Œª a ‚Üí ((-1# * (F‚ÇÅ + (F‚ÇÅ + F‚ÇÄ))) + a)) (n‚â°1*n ((F‚ÇÅ + F‚ÇÄ) + F‚ÇÅ)) ‚ü©

      ((-1# * (F‚ÇÅ + (F‚ÇÅ + F‚ÇÄ))) + (1# *‚Ä≤ ((F‚ÇÅ + F‚ÇÄ) + F‚ÇÅ)))
      
    ‚â°‚ü® cong (Œª a ‚Üí a + (1# *‚Ä≤ ((F‚ÇÅ + F‚ÇÄ) + F‚ÇÅ))) (*-distribÀ° -1# F‚ÇÅ (F‚ÇÅ + F‚ÇÄ)) ‚ü©

      (((-1# *‚Ä≤ F‚ÇÅ) + (-1# *‚Ä≤ (F‚ÇÅ + F‚ÇÄ))) +  (1# *‚Ä≤ ((F‚ÇÅ + F‚ÇÄ) + F‚ÇÅ)))

    ‚â°‚ü® +-assoc (-1# *‚Ä≤ F‚ÇÅ) (-1# *‚Ä≤ (F‚ÇÅ + F‚ÇÄ)) (1# *‚Ä≤ ((F‚ÇÅ + F‚ÇÄ) + F‚ÇÅ)) ‚ü©

      ( (-1# *‚Ä≤ F‚ÇÅ) + ((-1# *‚Ä≤ (F‚ÇÅ + F‚ÇÄ))  +  (1# *‚Ä≤ ((F‚ÇÅ + F‚ÇÄ) + F‚ÇÅ))))

    ‚â°‚ü® cong (Œª a ‚Üí ((-1# *‚Ä≤ F‚ÇÅ) + ((-1# *‚Ä≤ (F‚ÇÅ + F‚ÇÄ)) + a))) (n‚â°n+0 (1# *‚Ä≤ ((F‚ÇÅ +‚Ä≤ F‚ÇÄ) +‚Ä≤ F‚ÇÅ))) ‚ü©

      ( (-1# *‚Ä≤ F‚ÇÅ) + ((-1# *‚Ä≤ (F‚ÇÅ + F‚ÇÄ))  + ((1# *‚Ä≤ ((F‚ÇÅ + F‚ÇÄ) + F‚ÇÅ)) + 0#)))

    ‚àé
    where
      F‚ÇÄ = F i
      F‚ÇÅ = F (i +1)
      open ‚â°-Reasoning

  -- g‚ÇÇ = F‚ÇÄ*ùëã‚Å∞ + F‚ÇÅ*ùëã¬π + ‚àë[i‚â•2] (F·µ¢‚Çä‚ÇÅ - F·µ¢ - F·µ¢‚Çã‚ÇÅ)*ùëã‚Å±
  g‚ÇÇ : PowerSeries
  g‚ÇÇ = ‚àë a where
    a : ‚Ñï ‚Üí A
    a 0 = F 1
    a 1 = F 0
    a i@(i-1@(_ +1) +1) = F (i +1) - (F i - F i-1)

  postulate
    g‚ÇÅ‚âàg‚ÇÇ : g‚ÇÅ ‚âà‚Çõ g‚ÇÇ

  -- g‚ÇÉ = 1 + 0*ùëã¬≤ + ‚àë[i‚â•2] 0*ùëã‚Å±
  g‚ÇÉ : PowerSeries
  g‚ÇÉ = ‚àë a where
    a : ‚Ñï ‚Üí A
    a 0 = 1#
    a 1 = 0#
    a ((_ +1) +1) = 0#‚Ä≤

  -- g‚ÇÑ = 1
  g‚ÇÑ : Polynomial
  g‚ÇÑ = 1# *ùëã‚Å∞

  postulate
    g‚ÇÉ‚ü∂‚àûg‚ÇÑ : g‚ÇÉ ‚ü∂‚àû g‚ÇÑ

  -- f‚ÇÅ = (- ùëã¬≤ - ùëã + 1)‚Åª¬π
  f‚ÇÅ : Polynomial
  f‚ÇÅ = elem ((((- 1#) *ùëã^ 2 +‚Çö ((- 1#) *ùëã^ 1 +‚Çö (1# *ùëã^ 0 +‚Çö 0‚Çö))) # p) ‚Åª¬π‚Çö) where
    postulate
      p : ((- 1#) *ùëã^ 2 +‚Çö ((- 1#) *ùëã^ 1 +‚Çö (1# *ùëã^ 0 +‚Çö 0‚Çö))) ‚ââ0‚Çö

  postulate
    f‚ÇÄ‚ü∂‚àûf‚ÇÅ : f‚ÇÄ ‚ü∂‚àû f‚ÇÅ

  limit[f‚ÇÄ]‚â°f‚ÇÅ : limit f‚ÇÄ f‚ÇÄ‚ü∂‚àûf‚ÇÅ ‚â° f‚ÇÅ
  limit[f‚ÇÄ]‚â°f‚ÇÅ = refl
  

  -- f‚ÇÇ = (œÜ‚Å∫√∑(1 + œÜ‚Å∫ùëã) - œÜ‚Å∫√∑(1 + œÜ‚Å∫ùëã)) √∑ sqrt[5]
  f‚ÇÇ : Polynomial
  f‚ÇÇ = (((œÜ‚Å∫ *ùëã‚Å∞ ) √∑‚Çö ((œÜ‚Å∫ *ùëã^ 1 +‚Çö 1‚Çö) # p‚ÇÅ)) -‚Çö
       (((œÜ‚Åª *ùëã‚Å∞ ) √∑‚Çö ((œÜ‚Åª *ùëã^ 1 +‚Çö 1‚Çö) # p‚ÇÇ)))) √∑‚Çö
       ((sqrt[5] *ùëã‚Å∞) # p‚ÇÉ) where
    postulate
      p‚ÇÅ : (œÜ‚Å∫ *ùëã^ 1 +‚Çö (1# *ùëã^ 0 +‚Çö 0‚Çö)) ‚ââ0‚Çö
      p‚ÇÇ : (œÜ‚Åª *ùëã^ 1 +‚Çö (1# *ùëã^ 0 +‚Çö 0‚Çö)) ‚ââ0‚Çö
      p‚ÇÉ : (sqrt[5] *ùëã^ 0 +‚Çö 0‚Çö) ‚ââ0‚Çö

  postulate
    f‚ÇÅ‚âàf‚ÇÇ : f‚ÇÅ ‚âà‚Çö f‚ÇÇ

  -- f‚ÇÉ = (œÜ‚Å∫ ‚àë (œÜ‚Å∫ ùëã)‚Å± - œÜ‚Åª ‚àë (œÜ‚Åª ùëã)‚Å±) √∑ sqrt[5]
  f‚ÇÉ : PowerSeries
  f‚ÇÉ = scale‚Çõ (sqrt[5]‚Åª¬π *ùëã‚Å∞)
         ((scale‚Çõ (œÜ‚Å∫ *ùëã‚Å∞) (‚àë (Œª i ‚Üí œÜ‚Å∫ ^ i))) -‚Çõ
          (scale‚Çõ (œÜ‚Åª *ùëã‚Å∞) (‚àë (Œª i ‚Üí œÜ‚Åª ^ i))))

  postulate
    f‚ÇÇ‚àû‚üµf‚ÇÉ : f‚ÇÉ ‚ü∂‚àû f‚ÇÇ

  limit[f‚ÇÉ]‚â°f‚ÇÇ : limit f‚ÇÉ f‚ÇÇ‚àû‚üµf‚ÇÉ ‚â° f‚ÇÇ
  limit[f‚ÇÉ]‚â°f‚ÇÇ = refl

  limit[f‚ÇÄ]‚âà‚Çölimit[f‚ÇÉ] : limit f‚ÇÄ f‚ÇÄ‚ü∂‚àûf‚ÇÅ ‚âà‚Çö limit f‚ÇÉ f‚ÇÇ‚àû‚üµf‚ÇÉ
  limit[f‚ÇÄ]‚âà‚Çölimit[f‚ÇÉ] = f‚ÇÅ‚âàf‚ÇÇ

  -- h·µ¢ = ((œÜ‚Å∫)‚Å±‚Å∫¬π - (œÜ‚Åª)‚Å±‚Å∫¬π) √∑ sqrt[5]
  h : ‚Ñï ‚Üí A
  h = fibonacci-extended
  
  -- f‚ÇÑ = ‚àë ((œÜ‚Å∫)‚Å±‚Å∫¬π - (œÜ‚Åª)‚Å±‚Å∫¬π) √∑ sqrt[5]
  f‚ÇÑ : PowerSeries
  f‚ÇÑ = ‚àë Œª i ‚Üí h (i +1)

  postulate
    f‚ÇÉ‚âàf‚ÇÑ : f‚ÇÉ ‚âà‚Çõ f‚ÇÑ

  f‚ÇÄ‚âàf‚ÇÉ : f‚ÇÄ ‚âà‚Çõ f‚ÇÉ
  f‚ÇÄ‚âàf‚ÇÉ = limit-injective f‚ÇÄ f‚ÇÄ‚ü∂‚àûf‚ÇÅ f‚ÇÉ f‚ÇÇ‚àû‚üµf‚ÇÉ limit[f‚ÇÄ]‚âà‚Çölimit[f‚ÇÉ]

  f‚ÇÄ‚âàf‚ÇÑ : f‚ÇÄ ‚âà‚Çõ f‚ÇÑ
  f‚ÇÄ‚âàf‚ÇÑ = IsEquivalence.trans ‚âà‚Çõ-isEquivalence f‚ÇÄ‚âàf‚ÇÉ f‚ÇÉ‚âàf‚ÇÑ

  F‚Çô‚Çä‚ÇÅ‚â°h‚Çô‚Çä‚ÇÅ : ‚àÄ {n} ‚Üí F (n +1) ‚â° h (n +1)
  F‚Çô‚Çä‚ÇÅ‚â°h‚Çô‚Çä‚ÇÅ {n} = f‚ÇÄ‚âàf‚ÇÑ n

  F‚Çô‚â°h‚Çô : ‚àÄ {n} ‚Üí F n ‚â° h n
  F‚Çô‚â°h‚Çô {zero} = refl
  F‚Çô‚â°h‚Çô {n +1} = F‚Çô‚Çä‚ÇÅ‚â°h‚Çô‚Çä‚ÇÅ

  
